class Cactus{
	field int currentPosition;
	field int height;
	field int width;
	
	field int GROUND_HEIGHT;
	
	constructor Cactus new(int AHeight, int AWidth, int groundHeight){
		let height = AHeight;
		let width = AWidth;
		
		let GROUND_HEIGHT = groundHeight;
		
		let currentPosition = 511;
		
		do draw();
		
		return this;
	}
	
	method void dispose(){
		do Memory.deAlloc(this);
		return;
	}
	
	method int getCurrentPosition(){
		return currentPosition;
	}
	
	method int getHeight(){
		return height;
	}
	
	method int getWidth(){
		return width;
	}
	
	method void draw(){
		var int rightBorder;
		var int memAddress;
		let rightBorder = Math.min(currentPosition + width, 511);

		
		let memAddress = 16384 + Utility.xyToScreenMap(currentPosition, GROUND_HEIGHT-height-2);

		if((memAddress > 16383) & (memAddress < 24576)){
			// column 0
			do Memory.poke(memAddress, 896);
			do Memory.poke(memAddress +32, 1984);
			do Memory.poke(memAddress +64, 1984);
			do Memory.poke(memAddress +96, 1984);
			do Memory.poke(memAddress +128, 1984);
			do Memory.poke(memAddress +160, 1984);
			do Memory.poke(memAddress +192, -14394);
			do Memory.poke(memAddress +224, -6202);
			do Memory.poke(memAddress +256, -6193);
			do Memory.poke(memAddress +288, -6193);
			do Memory.poke(memAddress +320, -6193);
			do Memory.poke(memAddress +352, -6193);
			do Memory.poke(memAddress +384, -6193);
			do Memory.poke(memAddress +416, -49);
			do Memory.poke(memAddress +448, -49);
			do Memory.poke(memAddress +480, -49);
			do Memory.poke(memAddress +512, -49);
			do Memory.poke(memAddress +544, 1999);
			do Memory.poke(memAddress +576, 1999);
			do Memory.poke(memAddress +608, 1999);
			do Memory.poke(memAddress +640, 2047);
			do Memory.poke(memAddress +672, 2046);
			do Memory.poke(memAddress +704, 2046);
			do Memory.poke(memAddress +736, 2040);
			do Memory.poke(memAddress +768, 1984);
			do Memory.poke(memAddress +800, 1984);
			do Memory.poke(memAddress +832, 1984);
			do Memory.poke(memAddress +864, 1984);
			do Memory.poke(memAddress +896, 1984);
			do Memory.poke(memAddress +928, 1984);
			do Memory.poke(memAddress +960, 1984);
			do Memory.poke(memAddress +992, 1984);
			// column 1
			do Memory.poke(memAddress +225, 1);
			do Memory.poke(memAddress +257, 1);
			do Memory.poke(memAddress +289, 1);
			do Memory.poke(memAddress +321, 1);
			do Memory.poke(memAddress +353, 1);
			do Memory.poke(memAddress +385, 1);
			do Memory.poke(memAddress +417, 1);
			do Memory.poke(memAddress +449, 1);
		}

		//do Screen.setColor(true);
		//do Screen.drawRectangle(currentPosition, GROUND_HEIGHT-height-1, rightBorder, GROUND_HEIGHT-1);
		
		return;
	}
	
	method void erase(){
		var int rightBorder;
		var int memAddress;
		let rightBorder = Math.min(currentPosition + width, 511);

		let memAddress = 16384 + Utility.xyToScreenMap(currentPosition, GROUND_HEIGHT-height-2);

		if((memAddress > 16383) & (memAddress < 24576)){
			// column 0
			do Memory.poke(memAddress, 0);
			do Memory.poke(memAddress +32, 0);
			do Memory.poke(memAddress +64, 0);
			do Memory.poke(memAddress +96, 0);
			do Memory.poke(memAddress +128, 0);
			do Memory.poke(memAddress +160, 0);
			do Memory.poke(memAddress +192, 0);
			do Memory.poke(memAddress +224, 0);
			do Memory.poke(memAddress +256, 0);
			do Memory.poke(memAddress +288, 0);
			do Memory.poke(memAddress +320, 0);
			do Memory.poke(memAddress +352, 0);
			do Memory.poke(memAddress +384, 0);
			do Memory.poke(memAddress +416, 0);
			do Memory.poke(memAddress +448, 0);
			do Memory.poke(memAddress +480, 0);
			do Memory.poke(memAddress +512, 0);
			do Memory.poke(memAddress +544, 0);
			do Memory.poke(memAddress +576, 0);
			do Memory.poke(memAddress +608, 0);
			do Memory.poke(memAddress +640, 0);
			do Memory.poke(memAddress +672, 0);
			do Memory.poke(memAddress +704, 0);
			do Memory.poke(memAddress +736, 0);
			do Memory.poke(memAddress +768, 0);
			do Memory.poke(memAddress +800, 0);
			do Memory.poke(memAddress +832, 0);
			do Memory.poke(memAddress +864, 0);
			do Memory.poke(memAddress +896, 0);
			do Memory.poke(memAddress +928, 0);
			do Memory.poke(memAddress +960, 0);
			do Memory.poke(memAddress +992, 0);
			// column 1
			do Memory.poke(memAddress +225, 0);
			do Memory.poke(memAddress +257, 0);
			do Memory.poke(memAddress +289, 0);
			do Memory.poke(memAddress +321, 0);
			do Memory.poke(memAddress +353, 0);
			do Memory.poke(memAddress +385, 0);
			do Memory.poke(memAddress +417, 0);
			do Memory.poke(memAddress +449, 0);
		}
		
		//do Screen.setColor(true);
		//do Screen.drawRectangle(currentPosition, GROUND_HEIGHT-height-1, rightBorder, GROUND_HEIGHT-1);
		
		return;
	}
	
	method void move(int speed){
		do erase();
		let currentPosition = Math.max(currentPosition - speed, 0);
		
		do draw();
		
		return;
	}
}